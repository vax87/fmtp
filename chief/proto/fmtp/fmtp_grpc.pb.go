// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0
// source: fmtp.proto

package fmtp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FmtpServiceClient is the client API for FmtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FmtpServiceClient interface {
	SendMsg(ctx context.Context, in *MsgList, opts ...grpc.CallOption) (*SvcResult, error)
	RecvMsq(ctx context.Context, in *SvcReq, opts ...grpc.CallOption) (*MsgList, error)
}

type fmtpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFmtpServiceClient(cc grpc.ClientConnInterface) FmtpServiceClient {
	return &fmtpServiceClient{cc}
}

func (c *fmtpServiceClient) SendMsg(ctx context.Context, in *MsgList, opts ...grpc.CallOption) (*SvcResult, error) {
	out := new(SvcResult)
	err := c.cc.Invoke(ctx, "/FmtpService.FmtpService/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtpServiceClient) RecvMsq(ctx context.Context, in *SvcReq, opts ...grpc.CallOption) (*MsgList, error) {
	out := new(MsgList)
	err := c.cc.Invoke(ctx, "/FmtpService.FmtpService/RecvMsq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FmtpServiceServer is the server API for FmtpService service.
// All implementations should embed UnimplementedFmtpServiceServer
// for forward compatibility
type FmtpServiceServer interface {
	SendMsg(context.Context, *MsgList) (*SvcResult, error)
	RecvMsq(context.Context, *SvcReq) (*MsgList, error)
}

// UnimplementedFmtpServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFmtpServiceServer struct {
}

func (UnimplementedFmtpServiceServer) SendMsg(context.Context, *MsgList) (*SvcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedFmtpServiceServer) RecvMsq(context.Context, *SvcReq) (*MsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvMsq not implemented")
}

// UnsafeFmtpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FmtpServiceServer will
// result in compilation errors.
type UnsafeFmtpServiceServer interface {
	mustEmbedUnimplementedFmtpServiceServer()
}

func RegisterFmtpServiceServer(s grpc.ServiceRegistrar, srv FmtpServiceServer) {
	s.RegisterService(&FmtpService_ServiceDesc, srv)
}

func _FmtpService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtpServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FmtpService.FmtpService/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtpServiceServer).SendMsg(ctx, req.(*MsgList))
	}
	return interceptor(ctx, in, info, handler)
}

func _FmtpService_RecvMsq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtpServiceServer).RecvMsq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FmtpService.FmtpService/RecvMsq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtpServiceServer).RecvMsq(ctx, req.(*SvcReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FmtpService_ServiceDesc is the grpc.ServiceDesc for FmtpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FmtpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FmtpService.FmtpService",
	HandlerType: (*FmtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _FmtpService_SendMsg_Handler,
		},
		{
			MethodName: "RecvMsq",
			Handler:    _FmtpService_RecvMsq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fmtp.proto",
}
